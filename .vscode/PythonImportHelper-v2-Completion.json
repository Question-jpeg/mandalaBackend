[
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "telebot",
        "description": "telebot",
        "isExtraImport": true,
        "detail": "telebot",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "telebot",
        "description": "telebot",
        "isExtraImport": true,
        "detail": "telebot",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "telebot",
        "description": "telebot",
        "isExtraImport": true,
        "detail": "telebot",
        "documentation": {}
    },
    {
        "label": "TeleBot",
        "importPath": "telebot",
        "description": "telebot",
        "isExtraImport": true,
        "detail": "telebot",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "telebot",
        "description": "telebot",
        "isExtraImport": true,
        "detail": "telebot",
        "documentation": {}
    },
    {
        "label": "FULL_PRICE",
        "importPath": "bot.config.values",
        "description": "bot.config.values",
        "isExtraImport": true,
        "detail": "bot.config.values",
        "documentation": {}
    },
    {
        "label": "SVG_PRICE",
        "importPath": "bot.config.values",
        "description": "bot.config.values",
        "isExtraImport": true,
        "detail": "bot.config.values",
        "documentation": {}
    },
    {
        "label": "svg2png",
        "importPath": "cairosvg",
        "description": "cairosvg",
        "isExtraImport": true,
        "detail": "cairosvg",
        "documentation": {}
    },
    {
        "label": "TRIANGLE_HEIGHT",
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "isExtraImport": true,
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "isExtraImport": true,
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "isExtraImport": true,
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "N",
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "isExtraImport": true,
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "TN",
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "isExtraImport": true,
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "INITIAL_ANGLE",
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "isExtraImport": true,
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "SVG_SIZE",
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "isExtraImport": true,
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "importPath": "bot.config.render.values",
        "description": "bot.config.render.values",
        "isExtraImport": true,
        "detail": "bot.config.render.values",
        "documentation": {}
    },
    {
        "label": "createMatrix",
        "importPath": "bot.logic.createMatrix",
        "description": "bot.logic.createMatrix",
        "isExtraImport": true,
        "detail": "bot.logic.createMatrix",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "is_valid_date",
        "importPath": "bot.utils",
        "description": "bot.utils",
        "isExtraImport": true,
        "detail": "bot.utils",
        "documentation": {}
    },
    {
        "label": "get_image",
        "importPath": "bot.logic.getImage",
        "description": "bot.logic.getImage",
        "isExtraImport": true,
        "detail": "bot.logic.getImage",
        "documentation": {}
    },
    {
        "label": "LINKS",
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "isExtraImport": true,
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "START_PAGE",
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "isExtraImport": true,
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "EXAMPLES_PAGE",
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "isExtraImport": true,
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_PAGE_1",
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "isExtraImport": true,
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "BUY_PAGE",
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "isExtraImport": true,
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "isExtraImport": true,
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "PageTypes",
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "isExtraImport": true,
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "bot.config.botMessages",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bot.config.botMessages",
        "description": "bot.config.botMessages",
        "detail": "bot.config.botMessages",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "SVG_SIZE",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "SVG_SIZE = 1200\nN = 16\nTN = 6\nWIDTH = (SVG_SIZE*0.9)/2/N\nSCALE_Y = sqrt(0.75)*2\nHEIGHT = WIDTH*SCALE_Y\nTRIANGLE_WIDTH = WIDTH * N\nTRIANGLE_HEIGHT = (HEIGHT * (N+1)) / 2\nINITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "N = 16\nTN = 6\nWIDTH = (SVG_SIZE*0.9)/2/N\nSCALE_Y = sqrt(0.75)*2\nHEIGHT = WIDTH*SCALE_Y\nTRIANGLE_WIDTH = WIDTH * N\nTRIANGLE_HEIGHT = (HEIGHT * (N+1)) / 2\nINITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "TN",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "TN = 6\nWIDTH = (SVG_SIZE*0.9)/2/N\nSCALE_Y = sqrt(0.75)*2\nHEIGHT = WIDTH*SCALE_Y\nTRIANGLE_WIDTH = WIDTH * N\nTRIANGLE_HEIGHT = (HEIGHT * (N+1)) / 2\nINITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "WIDTH = (SVG_SIZE*0.9)/2/N\nSCALE_Y = sqrt(0.75)*2\nHEIGHT = WIDTH*SCALE_Y\nTRIANGLE_WIDTH = WIDTH * N\nTRIANGLE_HEIGHT = (HEIGHT * (N+1)) / 2\nINITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "SCALE_Y",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "SCALE_Y = sqrt(0.75)*2\nHEIGHT = WIDTH*SCALE_Y\nTRIANGLE_WIDTH = WIDTH * N\nTRIANGLE_HEIGHT = (HEIGHT * (N+1)) / 2\nINITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "HEIGHT = WIDTH*SCALE_Y\nTRIANGLE_WIDTH = WIDTH * N\nTRIANGLE_HEIGHT = (HEIGHT * (N+1)) / 2\nINITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "TRIANGLE_WIDTH",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "TRIANGLE_WIDTH = WIDTH * N\nTRIANGLE_HEIGHT = (HEIGHT * (N+1)) / 2\nINITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "TRIANGLE_HEIGHT",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "TRIANGLE_HEIGHT = (HEIGHT * (N+1)) / 2\nINITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "INITIAL_ANGLE",
        "kind": 5,
        "importPath": "bot.config.render.sizes",
        "description": "bot.config.render.sizes",
        "peekOfCode": "INITIAL_ANGLE = pi/2",
        "detail": "bot.config.render.sizes",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "bot.config.render.values",
        "description": "bot.config.render.values",
        "peekOfCode": "COLORS = {\n  0: {\n    'color': 'black',\n    'desc': \"Мандала не смогла определить. Вы являетесь настоящей загадкой для вселенной\",\n  },\n  1: {\n    'color': \"#CE1719\",\n    'desc': \"Динамизм, подвижность, хорошая карма, сострадательность, отзывчивость, любовь, радость и богатство. Вы способны на агрессию и обладание властью\",\n  },\n  2: {",
        "detail": "bot.config.render.values",
        "documentation": {}
    },
    {
        "label": "DATE_ERROR",
        "kind": 5,
        "importPath": "bot.config.botMessages",
        "description": "bot.config.botMessages",
        "peekOfCode": "DATE_ERROR = \"\"\"\nНекорректный ввод даты. Пример ввода даты: 26031969\n(Число, Месяц и Год без разделительных знаков)\"\"\"\nSUCCESSFUL_PAYMENT = \"Отлично! Теперь введите вашу дату рождения без разделительных знаков. Пример: 26031969\"\nHELP = 'Для навигации воспользуйтесь меню'",
        "detail": "bot.config.botMessages",
        "documentation": {}
    },
    {
        "label": "SUCCESSFUL_PAYMENT",
        "kind": 5,
        "importPath": "bot.config.botMessages",
        "description": "bot.config.botMessages",
        "peekOfCode": "SUCCESSFUL_PAYMENT = \"Отлично! Теперь введите вашу дату рождения без разделительных знаков. Пример: 26031969\"\nHELP = 'Для навигации воспользуйтесь меню'",
        "detail": "bot.config.botMessages",
        "documentation": {}
    },
    {
        "label": "HELP",
        "kind": 5,
        "importPath": "bot.config.botMessages",
        "description": "bot.config.botMessages",
        "peekOfCode": "HELP = 'Для навигации воспользуйтесь меню'",
        "detail": "bot.config.botMessages",
        "documentation": {}
    },
    {
        "label": "PageTypes",
        "kind": 6,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "class PageTypes:\n    TEXT = 0\n    PHOTO = 1\n    MEDIA_GROUP = 2\n    INVOICE = 3\nclass Page:\n    type = PageTypes.TEXT\n    reply_markup = None\n    def __init__(self, link, text):\n        self.link = link",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "Page",
        "kind": 6,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "class Page:\n    type = PageTypes.TEXT\n    reply_markup = None\n    def __init__(self, link, text):\n        self.link = link\n        self.text = text\n    def get_text(self, message):\n        if isinstance(self.text, str):\n            return self.text\n        return self.text(message)",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "PhotoPage",
        "kind": 6,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "class PhotoPage(Page):\n    type = PageTypes.PHOTO\n    def __init__(self, link, text, photo_file_id):\n        super().__init__(link, text)\n        self.photo_file_id = photo_file_id\nclass MediaGroupPage(Page):\n    type = PageTypes.MEDIA_GROUP\n    def __init__(self, link, text, photo_file_ids):\n        super().__init__(link, text)\n        self.photo_file_ids = photo_file_ids",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "MediaGroupPage",
        "kind": 6,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "class MediaGroupPage(Page):\n    type = PageTypes.MEDIA_GROUP\n    def __init__(self, link, text, photo_file_ids):\n        super().__init__(link, text)\n        self.photo_file_ids = photo_file_ids\nclass InvoicePage(Page):\n    type = PageTypes.INVOICE\n    def __init__(self, link, title, text, price: types.LabeledPrice):\n        super().__init__(link, text)\n        self.title = title",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "InvoicePage",
        "kind": 6,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "class InvoicePage(Page):\n    type = PageTypes.INVOICE\n    def __init__(self, link, title, text, price: types.LabeledPrice):\n        super().__init__(link, text)\n        self.title = title\n        self.price = price\nSTART_PAGE = PhotoPage(\n    link=\"start\",\n    text=\"\"\"\nЗдравствуйте!",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "START_PAGE",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "START_PAGE = PhotoPage(\n    link=\"start\",\n    text=\"\"\"\nЗдравствуйте!\nВ этом боте вы можете:\n1⃣ Сделать свою мандалу по дате рождения самостоятельно\n2⃣ Приобрести мандалу\n3⃣ Посмотреть примеры готовых мандал\nДля навигации используйте меню\n\"\"\",",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "EXAMPLES_PAGE",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "EXAMPLES_PAGE = MediaGroupPage(\n    link=\"ex_page\",\n    text=\"Примеры готовых мандал\",\n    photo_file_ids=[\n        \"AgACAgIAAxkDAAIBVWTMl4vXuhVU0GmcwHECQ81P01tzAAJN0TEb5RlgSgV-sltK2xWIAQADAgADcwADLwQ\",\n        \"AgACAgIAAxkDAAIBWWTMl7wb5Xgvfl8X9JZiknmstH7QAAJO0TEb5RlgSqL5B7Y3t17aAQADAgADcwADLwQ\",\n        \"AgACAgIAAxkDAAIBXWTMl-bx1OZC9Hjcw9v08U-jQbJ_AAJQ0TEb5RlgSlyr3LNGlaTBAQADAgADcwADLwQ\",\n    ],\n)\nINSTRUCTION_PAGE_1 = PhotoPage(",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_PAGE_1",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "INSTRUCTION_PAGE_1 = PhotoPage(\n    link=\"inst_page_3\",\n    text=\"Распечатайте чистую мандалу, которую в дальнейшем будете закрашивать. Для удобства можете скачать её у нас.\",\n    photo_file_id=\"AgACAgIAAxkBAAIBHWTMiLNMuguWJIAGPH5WuN_72bNSAAPRMRvlGWBKikQu6xuHZzABAAMCAANzAAMvBA\",\n)\nINSTRUCTION_PAGE_2 = PhotoPage(\n    link=\"inst_page_1\",\n    text=\"\"\"\n1⃣ Запишите свою дату рождения, например, 26.03.1969 в виде 26031969.\n2⃣ Зеркально отразите и допишите этот ряд цифр в конце исходного. В нашем примере получится следующее: ",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_PAGE_2",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "INSTRUCTION_PAGE_2 = PhotoPage(\n    link=\"inst_page_1\",\n    text=\"\"\"\n1⃣ Запишите свою дату рождения, например, 26.03.1969 в виде 26031969.\n2⃣ Зеркально отразите и допишите этот ряд цифр в конце исходного. В нашем примере получится следующее: \n26031969 96913062 \n(должно быть 16 знаков).\n3⃣ Для удобства цифры можно разделить пробелами:                \n2 6 0 3 1 9 6 9 9 6 9 1 3 0 6 2.\nВпоследствии это также позволит сделать более наглядным наш цифровой треугольник.",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_PAGE_3",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "INSTRUCTION_PAGE_3 = PhotoPage(\n    link=\"inst_page_2\",\n    text=\"Результат заполнения\",\n    photo_file_id=\"AgACAgIAAxkBAAPsZMlV_8rCsTwlOTv2g5GMjppF3qwAAn7SMRsi-EhKROw5vmEK1kQBAAMCAANzAAMvBA\",\n)\nINSTRUCTION_PAGE_4 = PhotoPage(\n    link=\"inst_page_4\",\n    text=\"\"\"\nКаждая цифра в полученном при расчетах треугольнике соответствует определенному цвету.\nЗакрасьте именно такими цветами каждую ячейку в треугольном сегменте мандалы (сегментов 6 и они одинаковые). ",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_PAGE_4",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "INSTRUCTION_PAGE_4 = PhotoPage(\n    link=\"inst_page_4\",\n    text=\"\"\"\nКаждая цифра в полученном при расчетах треугольнике соответствует определенному цвету.\nЗакрасьте именно такими цветами каждую ячейку в треугольном сегменте мандалы (сегментов 6 и они одинаковые). \nВ нашем случае последовательность 2603196996913062 будет соответствовать внешней стороне шестиугольника, а цифра 4 будет находиться в самой серединке.\n\"\"\",\n    photo_file_id=\"AgACAgIAAxkBAAIBImTMiwXUNZZhh4LgQxO2TAZwg_EnAAII0TEb5RlgSiJd_MS2dL2tAQADAgADcwADLwQ\",\n)\nINSTRUCTION_PAGE_5 = PhotoPage(",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_PAGE_5",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "INSTRUCTION_PAGE_5 = PhotoPage(\n    link=\"inst_page_5\",\n    text=\"Закрашенный сегмент (всего 6)\",\n    photo_file_id=\"AgACAgIAAxkBAAIB12TM4BwvipUY1DlYGF6ktKTufEMYAAJMzDEbLllpSsvU-angI0VuAQADAgADcwADLwQ\",\n)\nINSTRUCTION_PAGE_6 = PhotoPage(\n    link=\"inst_page_6\",\n    text=\"Готовая мандала\",\n    photo_file_id=\"AgACAgIAAxkDAAIBpGTM2YIox26WXIn-io2MowQDhuFiAAJW0TEb5RlgSlphTvygGnjLAQADAgADcwADLwQ\",\n)",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INSTRUCTION_PAGE_6",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "INSTRUCTION_PAGE_6 = PhotoPage(\n    link=\"inst_page_6\",\n    text=\"Готовая мандала\",\n    photo_file_id=\"AgACAgIAAxkDAAIBpGTM2YIox26WXIn-io2MowQDhuFiAAJW0TEb5RlgSlphTvygGnjLAQADAgADcwADLwQ\",\n)\nBUY_PAGE = Page(link=\"buy_page\", text=\"Приобрести мандалу:\")\nINVOICE_PAGE_SVG = InvoicePage(\n    link=\"invoice_svg\",\n    title=\"Мандала без описания\",\n    text=\"Вы получите только рисунок\",",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "BUY_PAGE",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "BUY_PAGE = Page(link=\"buy_page\", text=\"Приобрести мандалу:\")\nINVOICE_PAGE_SVG = InvoicePage(\n    link=\"invoice_svg\",\n    title=\"Мандала без описания\",\n    text=\"Вы получите только рисунок\",\n    price=SVG_PRICE,\n)\nINVOICE_PAGE_FULL = InvoicePage(\n    link=\"invoice_full\",\n    title=\"Мандала с полным описанием\",",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INVOICE_PAGE_SVG",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "INVOICE_PAGE_SVG = InvoicePage(\n    link=\"invoice_svg\",\n    title=\"Мандала без описания\",\n    text=\"Вы получите только рисунок\",\n    price=SVG_PRICE,\n)\nINVOICE_PAGE_FULL = InvoicePage(\n    link=\"invoice_full\",\n    title=\"Мандала с полным описанием\",\n    text=\"Вы получите рисунок с подробным описанием его значения\",",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "INVOICE_PAGE_FULL",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "INVOICE_PAGE_FULL = InvoicePage(\n    link=\"invoice_full\",\n    title=\"Мандала с полным описанием\",\n    text=\"Вы получите рисунок с подробным описанием его значения\",\n    price=FULL_PRICE,\n)\nINSTRUCTION_PAGE_1.set_reply_markup(\n    {\"Далее\": {\"callback_data\": INSTRUCTION_PAGE_2.link}}\n)\nINSTRUCTION_PAGE_2.set_reply_markup(",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "LINKS",
        "kind": 5,
        "importPath": "bot.config.pages",
        "description": "bot.config.pages",
        "peekOfCode": "LINKS = {\n    START_PAGE.link: START_PAGE,\n    EXAMPLES_PAGE.link: EXAMPLES_PAGE,\n    #\n    INSTRUCTION_PAGE_1.link: INSTRUCTION_PAGE_1,\n    INSTRUCTION_PAGE_2.link: INSTRUCTION_PAGE_2,\n    INSTRUCTION_PAGE_3.link: INSTRUCTION_PAGE_3,\n    INSTRUCTION_PAGE_4.link: INSTRUCTION_PAGE_4,\n    INSTRUCTION_PAGE_5.link: INSTRUCTION_PAGE_5,\n    INSTRUCTION_PAGE_6.link: INSTRUCTION_PAGE_6,",
        "detail": "bot.config.pages",
        "documentation": {}
    },
    {
        "label": "SVG_PRICE",
        "kind": 5,
        "importPath": "bot.config.values",
        "description": "bot.config.values",
        "peekOfCode": "SVG_PRICE = types.LabeledPrice('Мандала без описания', 6000)\nFULL_PRICE = types.LabeledPrice('Мандала с описанием', 15000)",
        "detail": "bot.config.values",
        "documentation": {}
    },
    {
        "label": "FULL_PRICE",
        "kind": 5,
        "importPath": "bot.config.values",
        "description": "bot.config.values",
        "peekOfCode": "FULL_PRICE = types.LabeledPrice('Мандала с описанием', 15000)",
        "detail": "bot.config.values",
        "documentation": {}
    },
    {
        "label": "sum_digits",
        "kind": 2,
        "importPath": "bot.logic.createMatrix",
        "description": "bot.logic.createMatrix",
        "peekOfCode": "def sum_digits(num):\n    return sum([int(n) for n in str(num)])\ndef createMatrix(date = ''):\n    result = []\n    sequence = [int(s) for s in date]\n    sequence = sequence + sequence[::-1]\n    while len(sequence) != 0:\n        result.append(sequence)\n        newSequence = []\n        for i in range(len(sequence)-1):",
        "detail": "bot.logic.createMatrix",
        "documentation": {}
    },
    {
        "label": "createMatrix",
        "kind": 2,
        "importPath": "bot.logic.createMatrix",
        "description": "bot.logic.createMatrix",
        "peekOfCode": "def createMatrix(date = ''):\n    result = []\n    sequence = [int(s) for s in date]\n    sequence = sequence + sequence[::-1]\n    while len(sequence) != 0:\n        result.append(sequence)\n        newSequence = []\n        for i in range(len(sequence)-1):\n            summ = sequence[i] + sequence[i+1]\n            while len(str(summ)) != 1:                ",
        "detail": "bot.logic.createMatrix",
        "documentation": {}
    },
    {
        "label": "get_image",
        "kind": 2,
        "importPath": "bot.logic.getImage",
        "description": "bot.logic.getImage",
        "peekOfCode": "def get_image(date):\n    data = createMatrix(date)\n    matrix = data['matrix']\n    centerText = COLORS[data['center']]['desc']\n    offsetX = SVG_SIZE / 2\n    offsetY = SVG_SIZE / 2 - TRIANGLE_HEIGHT / 2\n    def generatePath(offsetX, offsetY, rowIndex, i):\n        color = COLORS[matrix[rowIndex][i]]['color']\n        return f'<path d=\"M {offsetX} {offsetY} L {offsetX+WIDTH/2} {offsetY+HEIGHT/2} L {offsetX} {offsetY+HEIGHT} L {offsetX-WIDTH/2} {offsetY+HEIGHT/2} Z\" fill=\"{color}\" />'\n    def generateSvg(i):",
        "detail": "bot.logic.getImage",
        "documentation": {}
    },
    {
        "label": "BotConfig",
        "kind": 6,
        "importPath": "bot.apps",
        "description": "bot.apps",
        "peekOfCode": "class BotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bot'",
        "detail": "bot.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "bot.urls",
        "description": "bot.urls",
        "peekOfCode": "urlpatterns = [\n    path('', csrf_exempt(views.index), name='index'),\n]",
        "detail": "bot.urls",
        "documentation": {}
    },
    {
        "label": "is_valid_date",
        "kind": 2,
        "importPath": "bot.utils",
        "description": "bot.utils",
        "peekOfCode": "def is_valid_date(day, month, year):\n    day_count_for_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if year%4==0 and (year%100 != 0 or year%400==0):\n        day_count_for_month[2] = 29\n    return (1 <= month <= 12 and 1 <= day <= day_count_for_month[month])",
        "detail": "bot.utils",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def index(request):\n    if request.method == \"POST\":\n        update = types.Update.de_json(request.body.decode(\"utf-8\"))\n        bot.process_new_updates([update])\n    return HttpResponse(\"<h1>Ты подключился!</h1>\")\ndef send_page(page: Page, message: types.Message):\n    chat_id = message.chat.id\n    if page.type == PageTypes.PHOTO:\n        bot.send_photo(\n            chat_id,",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "send_page",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def send_page(page: Page, message: types.Message):\n    chat_id = message.chat.id\n    if page.type == PageTypes.PHOTO:\n        bot.send_photo(\n            chat_id,\n            page.photo_file_id,\n            page.get_text(message),\n            \"html\",\n            reply_markup=page.reply_markup,\n        )",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "handle_callback_page",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def handle_callback_page(page: Page, message: types.Message):\n    chat_id = message.chat.id\n    if page.type == PageTypes.PHOTO:\n        bot.edit_message_media(\n            types.InputMediaPhoto(page.photo_file_id, page.get_text(message), \"html\"),\n            chat_id,\n            message.id,\n            reply_markup=page.reply_markup,\n        )\n    elif page.type == PageTypes.TEXT:",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "handle_callback",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def handle_callback(query: types.CallbackQuery):\n    link = query.data\n    message = query.message\n    handle_callback_page(LINKS[link], message)\n@bot.message_handler(commands=[\"getFileID\"])\ndef get_file_id(message: types.Message):\n    bot.send_message(message.chat.id, message.reply_to_message.photo[0].file_id)\n@bot.message_handler(commands=[\"start\"])\ndef start(message: types.Message):\n    send_page(START_PAGE, message)",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "get_file_id",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def get_file_id(message: types.Message):\n    bot.send_message(message.chat.id, message.reply_to_message.photo[0].file_id)\n@bot.message_handler(commands=[\"start\"])\ndef start(message: types.Message):\n    send_page(START_PAGE, message)\n@bot.message_handler(commands=[\"examples\"])\ndef examples(message: types.Message):\n    send_page(EXAMPLES_PAGE, message)\n@bot.message_handler(commands=[\"instruction\"])\ndef instruction(message: types.Message):",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def start(message: types.Message):\n    send_page(START_PAGE, message)\n@bot.message_handler(commands=[\"examples\"])\ndef examples(message: types.Message):\n    send_page(EXAMPLES_PAGE, message)\n@bot.message_handler(commands=[\"instruction\"])\ndef instruction(message: types.Message):\n    send_page(INSTRUCTION_PAGE_1, message)\n@bot.message_handler(commands=[\"buy\"])\ndef buy(message: types.Message):",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "examples",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def examples(message: types.Message):\n    send_page(EXAMPLES_PAGE, message)\n@bot.message_handler(commands=[\"instruction\"])\ndef instruction(message: types.Message):\n    send_page(INSTRUCTION_PAGE_1, message)\n@bot.message_handler(commands=[\"buy\"])\ndef buy(message: types.Message):\n    send_page(BUY_PAGE, message)\n@bot.pre_checkout_query_handler(func=lambda query: True)\ndef checkout(pre_checkout_query):",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "instruction",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def instruction(message: types.Message):\n    send_page(INSTRUCTION_PAGE_1, message)\n@bot.message_handler(commands=[\"buy\"])\ndef buy(message: types.Message):\n    send_page(BUY_PAGE, message)\n@bot.pre_checkout_query_handler(func=lambda query: True)\ndef checkout(pre_checkout_query):\n    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,\n                                  error_message=\"Возникла проблема, попробуйте позднее\")                                  \n@bot.message_handler(content_types=['successful_payment'])",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "buy",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def buy(message: types.Message):\n    send_page(BUY_PAGE, message)\n@bot.pre_checkout_query_handler(func=lambda query: True)\ndef checkout(pre_checkout_query):\n    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,\n                                  error_message=\"Возникла проблема, попробуйте позднее\")                                  \n@bot.message_handler(content_types=['successful_payment'])\ndef got_payment(message: types.Message):\n    sent = bot.send_message(message.chat.id, BOT_MESSAGES.SUCCESSFUL_PAYMENT)\n    bot.register_next_step_handler(sent, mandala)",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def checkout(pre_checkout_query):\n    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,\n                                  error_message=\"Возникла проблема, попробуйте позднее\")                                  \n@bot.message_handler(content_types=['successful_payment'])\ndef got_payment(message: types.Message):\n    sent = bot.send_message(message.chat.id, BOT_MESSAGES.SUCCESSFUL_PAYMENT)\n    bot.register_next_step_handler(sent, mandala)\ndef mandala(message: types.Message):\n    chat_id = message.chat.id\n    dateString = message.text",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "got_payment",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def got_payment(message: types.Message):\n    sent = bot.send_message(message.chat.id, BOT_MESSAGES.SUCCESSFUL_PAYMENT)\n    bot.register_next_step_handler(sent, mandala)\ndef mandala(message: types.Message):\n    chat_id = message.chat.id\n    dateString = message.text\n    validator = r\"^\\d\\d\\d\\d\\d\\d\\d\\d$\"\n    is_match = bool(re.fullmatch(validator, dateString))\n    is_valid = False\n    if is_match:",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "mandala",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def mandala(message: types.Message):\n    chat_id = message.chat.id\n    dateString = message.text\n    validator = r\"^\\d\\d\\d\\d\\d\\d\\d\\d$\"\n    is_match = bool(re.fullmatch(validator, dateString))\n    is_valid = False\n    if is_match:\n        day = int(dateString[:2])\n        month = int(dateString[2:4])\n        year = int(dateString[4:])",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "handle_none",
        "kind": 2,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "def handle_none(message: types.Message):\n    bot.send_message(message.chat.id, BOT_MESSAGES.HELP)",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "bot.views",
        "description": "bot.views",
        "peekOfCode": "bot = TeleBot(settings.BOT_TOKEN)\ndef index(request):\n    if request.method == \"POST\":\n        update = types.Update.de_json(request.body.decode(\"utf-8\"))\n        bot.process_new_updates([update])\n    return HttpResponse(\"<h1>Ты подключился!</h1>\")\ndef send_page(page: Page, message: types.Message):\n    chat_id = message.chat.id\n    if page.type == PageTypes.PHOTO:\n        bot.send_photo(",
        "detail": "bot.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mandalaBackend.asgi",
        "description": "mandalaBackend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "mandalaBackend.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bot',\n]\nMIDDLEWARE = [",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'mandalaBackend.urls'",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "ROOT_URLCONF = 'mandalaBackend.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "WSGI_APPLICATION = 'mandalaBackend.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'static/'",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'static/'",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'static/'",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'static/'",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'static/'",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = 'static/'",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "mandalaBackend.settings",
        "description": "mandalaBackend.settings",
        "peekOfCode": "STATIC_ROOT = 'static/'",
        "detail": "mandalaBackend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "mandalaBackend.settingsProd",
        "description": "mandalaBackend.settingsProd",
        "peekOfCode": "SECRET_KEY = '*yjk1d^6nmihmfv2gaupw!d@+54up+jzk$nni1l9ukw#zb)n+p'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nBOT_TOKEN = '6106100658:AAF8WkJ5p02tw12i-AbeVZdjOcHnV3ETFfI'\nPAYMENT_PROVIDER_TOKEN = '381764678:TEST:63379'\n# '401643678:TEST:9ce8302a-2dd8-47ce-90f4-31a6cd1e30f8'\nALLOWED_HOSTS = ['6b68-91-219-189-204.ngrok.io', '127.0.0.1']",
        "detail": "mandalaBackend.settingsProd",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "mandalaBackend.settingsProd",
        "description": "mandalaBackend.settingsProd",
        "peekOfCode": "DEBUG = True\nBOT_TOKEN = '6106100658:AAF8WkJ5p02tw12i-AbeVZdjOcHnV3ETFfI'\nPAYMENT_PROVIDER_TOKEN = '381764678:TEST:63379'\n# '401643678:TEST:9ce8302a-2dd8-47ce-90f4-31a6cd1e30f8'\nALLOWED_HOSTS = ['6b68-91-219-189-204.ngrok.io', '127.0.0.1']",
        "detail": "mandalaBackend.settingsProd",
        "documentation": {}
    },
    {
        "label": "BOT_TOKEN",
        "kind": 5,
        "importPath": "mandalaBackend.settingsProd",
        "description": "mandalaBackend.settingsProd",
        "peekOfCode": "BOT_TOKEN = '6106100658:AAF8WkJ5p02tw12i-AbeVZdjOcHnV3ETFfI'\nPAYMENT_PROVIDER_TOKEN = '381764678:TEST:63379'\n# '401643678:TEST:9ce8302a-2dd8-47ce-90f4-31a6cd1e30f8'\nALLOWED_HOSTS = ['6b68-91-219-189-204.ngrok.io', '127.0.0.1']",
        "detail": "mandalaBackend.settingsProd",
        "documentation": {}
    },
    {
        "label": "PAYMENT_PROVIDER_TOKEN",
        "kind": 5,
        "importPath": "mandalaBackend.settingsProd",
        "description": "mandalaBackend.settingsProd",
        "peekOfCode": "PAYMENT_PROVIDER_TOKEN = '381764678:TEST:63379'\n# '401643678:TEST:9ce8302a-2dd8-47ce-90f4-31a6cd1e30f8'\nALLOWED_HOSTS = ['6b68-91-219-189-204.ngrok.io', '127.0.0.1']",
        "detail": "mandalaBackend.settingsProd",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "mandalaBackend.settingsProd",
        "description": "mandalaBackend.settingsProd",
        "peekOfCode": "ALLOWED_HOSTS = ['6b68-91-219-189-204.ngrok.io', '127.0.0.1']",
        "detail": "mandalaBackend.settingsProd",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mandalaBackend.urls",
        "description": "mandalaBackend.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bot.urls'))\n]",
        "detail": "mandalaBackend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mandalaBackend.wsgi",
        "description": "mandalaBackend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "mandalaBackend.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mandalaBackend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]